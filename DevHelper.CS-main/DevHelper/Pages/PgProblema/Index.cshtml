@page
@model DevHelper.Razor.Pages.PgProblema.IndexModel

@{
    ViewData["Title"] = "Feed";

    string TruncateDescription(string descricao, int maxLength)
    {
        if (string.IsNullOrEmpty(descricao) || descricao.Length <= maxLength)
        {
            return descricao;
        }
        var lastSpaceIndex = descricao.LastIndexOf(' ', maxLength);
        return lastSpaceIndex == -1 ? descricao.Substring(0, maxLength) : descricao.Substring(0, lastSpaceIndex);
    }
}

<h1>Feed</h1>
<hr />
<div class="feed-container">
    @foreach (var item in Model.Problema)
    {
        <div class="feed-item">
            <div>
                <strong>Usuário:</strong>
                <a href="@Url.Page("/PgCadUsuario/Details", new { Id = item.Usuario.Id })" class="clickable-label">
                    @Html.DisplayFor(modelItem => item.Usuario.Nome)
                </a>
            </div>
            <div>
                <strong>Nome do problema:</strong>
                <a href="@Url.Page("/PgProblema/Details", new { Id = item.Id })" class="clickable-label">
                    @Html.DisplayFor(modelItem => item.Nome)
                </a>
            </div>
            <div>
                <strong>Descrição:</strong>
                <span>
                    @if (item.Descricao.Length > 100)
                    {
                        @TruncateDescription(item.Descricao, 100)

                        <span class="leia-mais-separator">...</span> <a href="@Url.Page("/PgProblema/Details", new { Id = item.Id })" class="leia-mais-link">Leia mais</a>
                    }
                    else
                    {
                        @item.Descricao
                    }
                </span>
            </div>
            @if (item.ArquivoProblemas != null && item.ArquivoProblemas.Any())
            {
                <div>
                    <strong>Arquivos:</strong>
                    <span class="file-count">(@item.ArquivoProblemas.Count())</span>
                </div>
            }
            @if (item.Solucaos != null && item.Solucaos.Any())
            {
                <div>
                    <strong>Soluções:</strong>
                    <div class="card-deck">
                        @foreach (var solucao in item.Solucaos.Take(3)) // Mostrar apenas 3 soluções
                        {
                            <div class="card clickable-card" data-url="@Url.Page("/PgSolucao/Details", new { Id = solucao.Id })">
                                <div class="card-body">
                                    <p class="card-text">@solucao.Descricao</p>
                                    <div class="like-dislike-container">
                                        <span>👍 @solucao.LikeCount</span>
                                        <span>👎 @solucao.DislikeCount</span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    @if (item.Solucaos.Count() > 3)
                    {
                        <a href="@Url.Page("/PgProblema/Details", new { Id = item.Id })" class="btn btn-load-more">Carregar mais soluções</a>
                    }
                </div>
            }
        </div>
        <hr />
    }
</div>

@section Scripts {
    <script>
        document.querySelectorAll('.clickable-card').forEach(card => {
            card.addEventListener('click', function () {
                window.location.href = this.dataset.url;
            });
        });
    </script>
}

<style>
    .feed-container {
        margin-top: 20px;
    }

    .feed-item {
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 1px solid #ddd;
    }

        .feed-item div {
            margin-bottom: 10px;
        }

    .clickable-label, .clickable-card, .leia-mais-link {
        cursor: pointer;
        color: #000;
        text-decoration: none;
    }

        .clickable-label:hover, .clickable-card:hover, .leia-mais-link:hover {
            text-decoration: underline;
            color: #000; /* Manter a cor preta ao passar o mouse */
        }

    .leia-mais-separator {
        display: inline-block;
        margin-right: 5px; /* Espaço entre a descrição e o link Leia mais */
    }

    .card-deck {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
    }

    .card {
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        width: calc(33.333% - 20px);
        margin-bottom: 20px;
        cursor: pointer;
        transition: transform 0.2s;
    }

        .card:hover {
            transform: scale(1.02);
        }

    .card-body {
        padding: 15px;
    }

    .card-text {
        margin: 0;
        color: #000;
        text-decoration: none;
    }

    .btn.btn-custom, .btn.btn-load-more {
        background-color: #22ffb6;
        color: #000;
        border: none;
        padding: 10px 20px;
        cursor: pointer;
        text-decoration: none;
        display: inline-block;
    }

        .btn.btn-custom:hover, .btn.btn-load-more:hover {
            background-color: #1ccc9a;
            color: #fff;
        }

    .file-count {
        color: #22ffb6;
        font-weight: bold;
        margin-left: 5px;
    }

    .like-dislike-container {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }
</style>
